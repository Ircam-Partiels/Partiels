cmake_minimum_required(VERSION 3.12)

set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9" CACHE STRING "Minimum OS X deployment version")
set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD)" CACHE STRING "")
set(CMAKE_XCODE_GENERATE_SCHEME true)
set(SDIF_EXAMPLES ON CACHE STRING "Add examples to the project")
set(SDIF_TESTS ON CACHE STRING "Add tests to the project")

set_property(GLOBAL PROPERTY USE_FOLDERS YES)
project(SDIF VERSION 3.11.7 LANGUAGES C CXX)

set(SDIF_SOURCE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/source")
set(SDIF_INCLUDE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include")
set(SDIF_TEST_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/test")

file(GLOB SDIF_INCLUDES ${SDIF_INCLUDE_DIRECTORY}/*h)
file(GLOB SDIF_SOURCES ${SDIF_SOURCE_DIRECTORY}/*h  ${SDIF_SOURCE_DIRECTORY}/*c)

source_group("sdif" FILES ${SDIF_INCLUDES} ${SDIF_SOURCES})
add_library(sdif STATIC ${SDIF_INCLUDES} ${SDIF_SOURCES})
target_include_directories(sdif PUBLIC ${SDIF_INCLUDE_DIRECTORY})
target_include_directories(sdif PRIVATE ${SDIF_SOURCE_DIRECTORY})

include(TestBigEndian)
test_big_endian(HOST_ENDIAN_BIG)
if(HOST_ENDIAN_BIG)
  target_compile_definitions(sdif PRIVATE HOST_ENDIAN_BIG)
else()
  target_compile_definitions(sdif PRIVATE HOST_ENDIAN_LITTLE)
endif()

target_compile_definitions(sdif PUBLIC SDIF_IS_STATIC)

if(WIN32)
  target_compile_options(sdif PRIVATE /wd4996 /wd4267 /wd4477)
elseif(APPLE)
  target_compile_options(sdif PRIVATE -Wno-parentheses-equality -Wno-switch -Wno-format-security -Wno-conversion)
  if(XCODE_VERSION VERSION_GREATER_EQUAL 15)
    target_compile_options(sdif PRIVATE -Wno-invalid-utf8)
  endif()
elseif(UNIX)
  target_compile_options(sdif PRIVATE -Wno-parentheses-equality -Wno-switch -Wno-format -Wno-unused-result)
endif()

if(APPLE)
set_target_properties(sdif PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "./")
endif()

if(SDIF_EXAMPLES)
add_executable(SdifTest1 ${SDIF_TEST_DIRECTORY}/test1.c ${SDIF_TEST_DIRECTORY}/utils.c)
target_include_directories(SdifTest1 PRIVATE "${SDIF_INCLUDE_DIRECTORY}")
target_link_libraries(SdifTest1 PRIVATE sdif)
if(UNIX)
target_link_libraries(SdifTest1 PRIVATE m)
endif()

add_executable(SdifTest2 ${SDIF_TEST_DIRECTORY}/test2.c ${SDIF_TEST_DIRECTORY}/utils.c)
target_include_directories(SdifTest2 PRIVATE "${SDIF_INCLUDE_DIRECTORY}")
target_link_libraries(SdifTest2 PRIVATE sdif)
if(UNIX)
target_link_libraries(SdifTest2 PRIVATE m)
endif()

add_executable(SdifListNvt ${SDIF_TEST_DIRECTORY}/list-nvt.c)
target_include_directories(SdifListNvt PRIVATE "${SDIF_INCLUDE_DIRECTORY}")
target_link_libraries(SdifListNvt PRIVATE sdif)
set_target_properties(SdifListNvt PROPERTIES XCODE_SCHEME_ARGUMENTS ${CMAKE_CURRENT_SOURCE_DIR}/test/files/AO.sdif)
if(UNIX)
target_link_libraries(SdifListNvt PRIVATE m)
endif()

add_executable(SdifListTypes ${SDIF_TEST_DIRECTORY}/list-types.c)
target_include_directories(SdifListTypes PRIVATE "${SDIF_INCLUDE_DIRECTORY}")
target_link_libraries(SdifListTypes PRIVATE sdif)
set_target_properties(SdifListTypes PROPERTIES XCODE_SCHEME_ARGUMENTS ${CMAKE_CURRENT_SOURCE_DIR}/test/files/AO.sdif)
if(UNIX)
target_link_libraries(SdifListTypes PRIVATE m)
endif()

add_executable(SdifRead ${SDIF_TEST_DIRECTORY}/read.c)
target_include_directories(SdifRead PRIVATE "${SDIF_INCLUDE_DIRECTORY}")
target_link_libraries(SdifRead PRIVATE sdif)
set_target_properties(SdifRead PROPERTIES XCODE_SCHEME_ARGUMENTS ${CMAKE_CURRENT_SOURCE_DIR}/test/files/1fof.sdif)
if(UNIX)
target_link_libraries(SdifRead PRIVATE m)
endif()
endif()

if(SDIF_TESTS)
enable_testing()
add_test(NAME Test1 COMMAND SdifTest1)
add_test(NAME Test2 COMMAND SdifTest2)
endif()
