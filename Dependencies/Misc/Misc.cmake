set(MiscBinaryDir ${CMAKE_CURRENT_LIST_DIR}/BinaryData)

file(GLOB MiscFontsDataSources ${MiscBinaryDir}/Fonts/*.ttf)
juce_add_binary_data(MiscFontsData HEADER_NAME "MiscFontsData.h" NAMESPACE MiscFontsData SOURCES ${MiscFontsDataSources})

add_library(MiscData INTERFACE)
target_link_libraries(MiscData INTERFACE MiscFontsData)

set(MiscSourceDir "${CMAKE_CURRENT_LIST_DIR}/Source")
if(APPLE)
   file(GLOB MiscSource ${MiscSourceDir}/*.cpp ${MiscSourceDir}/*.h ${MiscSourceDir}/*.mm)
else()
   file(GLOB MiscSource ${MiscSourceDir}/*.cpp ${MiscSourceDir}/*.h)
endif()
source_group("Misc" FILES ${MiscSource})

set(MiscZoomSourceDir "${MiscSourceDir}/Zoom")
if(APPLE)
   file(GLOB MiscZoomSource ${MiscZoomSourceDir}/*.cpp ${MiscZoomSourceDir}/*.h ${MiscZoomSourceDir}/*.mm)
else()
   file(GLOB MiscZoomSource ${MiscZoomSourceDir}/*.cpp ${MiscZoomSourceDir}/*.h)
endif()
source_group("Misc/Zoom" FILES ${MiscZoomSource})

set(MiscTransportSourceDir "${MiscSourceDir}/Transport")
if(APPLE)
   file(GLOB MiscTransportSource ${MiscTransportSourceDir}/*.cpp ${MiscTransportSourceDir}/*.h ${MiscTransportSourceDir}/*.mm)
else()
   file(GLOB MiscTransportSource ${MiscTransportSourceDir}/*.cpp ${MiscTransportSourceDir}/*.h)
endif()
source_group("Misc/Transport" FILES ${MiscTransportSource})

function(target_misc_setup target )
    target_sources(${target} PRIVATE ${MiscSource})
    if("${ARGV}" MATCHES "MISC_ZOOM_ENABLED" OR "${ARGV}" MATCHES "MISC_TRANSPORT_ENABLED")
        message(STATUS "${target}: Misc zoom enabled")
        target_compile_definitions(${target} PUBLIC MISC_ZOOM_ENABLED)
        target_sources(${target} PRIVATE ${MiscZoomSource})
    endif()
    if("${ARGV}" MATCHES "MISC_TRANSPORT_ENABLED")
        message(STATUS "${target}: Misc transport enabled")
        target_compile_definitions(${target} PUBLIC MISC_TRANSPORT_ENABLED)
        target_sources(${target} PRIVATE ${MiscTransportSource})
    endif()
    target_link_libraries(${target} PRIVATE MiscData)
    if(UNIX AND NOT APPLE)
        target_link_libraries(${target} PRIVATE atomic)
    endif()
endfunction()
