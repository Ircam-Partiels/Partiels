diff --git forkSrcPrefix/vamp-hostsdk/PluginHostAdapter.h forkDstPrefix/vamp-hostsdk/PluginHostAdapter.h
index 2ca1d6994943e75febcbbce5cdc6fe22a3aa9342..ddadf94fad83e1cbf1151f65d0eaf30de959a9d7 100644
--- forkSrcPrefix/vamp-hostsdk/PluginHostAdapter.h
+++ forkDstPrefix/vamp-hostsdk/PluginHostAdapter.h
@@ -107,6 +107,10 @@ public:
 
     FeatureSet getRemainingFeatures();
 
+    VampPluginHandle getPluginHandle() {
+        return m_handle;
+    }
+
 protected:
     void convertFeatures(VampFeatureList *, FeatureSet &);
 
diff --git forkSrcPrefix/src/vamp-hostsdk/PluginLoader.cpp forkDstPrefix/src/vamp-hostsdk/PluginLoader.cpp
index c0f1894969b315d19c43a0cbf31f85ef81c686fd..6dc954ee9f49885306f47afdbd23142eb44d9bc8 100644
--- forkSrcPrefix/src/vamp-hostsdk/PluginLoader.cpp
+++ forkDstPrefix/src/vamp-hostsdk/PluginLoader.cpp
@@ -45,6 +45,7 @@
 #include "Files.h"
 
 #include <fstream>
+#include <mutex>
 
 using namespace std;
 
@@ -114,6 +115,7 @@ protected:
     map<PluginKey, PluginCategoryHierarchy> m_taxonomy;
     void generateTaxonomy();
 
+    std::mutex m_mutex;
     map<Plugin *, void *> m_pluginLibraryHandleMap;
 
     bool decomposePluginKey(PluginKey key,
@@ -446,7 +448,9 @@ PluginLoader::Impl::loadPlugin(PluginKey key,
 
             Plugin *adapter = new PluginDeletionNotifyAdapter(plugin, this);
 
+            std::unique_lock<std::mutex> lock(m_mutex);
             m_pluginLibraryHandleMap[adapter] = handle;
+            lock.unlock();
 
             if (adapterFlags & ADAPT_INPUT_DOMAIN) {
                 if (adapter->getInputDomain() == Plugin::FrequencyDomain) {
@@ -566,6 +570,7 @@ PluginLoader::Impl::generateTaxonomy()
 void
 PluginLoader::Impl::pluginDeleted(PluginDeletionNotifyAdapter *adapter)
 {
+    std::unique_lock<std::mutex> lock(m_mutex);
     void *handle = m_pluginLibraryHandleMap[adapter];
     if (!handle) return;
 
@@ -577,6 +582,7 @@ PluginLoader::Impl::pluginDeleted(PluginDeletionNotifyAdapter *adapter)
             return;
         }
     }
+    lock.unlock();
     
     Files::unloadLibrary(handle);
 }
@@ -602,6 +608,13 @@ PluginLoader::Impl::PluginDeletionNotifyAdapter::~PluginDeletionNotifyAdapter()
     if (m_loader) m_loader->pluginDeleted(this);
 }
 
+#ifdef __APPLE__
+void PluginLoader::setIgnoreQuanrantineLibs(bool state)
+{
+    Files::ignoreQuarantine = state;
+}
+#endif
+
 }
 
 }
diff --git forkSrcPrefix/src/vamp-hostsdk/Files.cpp forkDstPrefix/src/vamp-hostsdk/Files.cpp
index 8dda7ff8b2f8a18358db54e80f83c913f92b13e8..bc4d9d8691932e3a39c177a47bb51575c6ff8141 100644
--- forkSrcPrefix/src/vamp-hostsdk/Files.cpp
+++ forkDstPrefix/src/vamp-hostsdk/Files.cpp
@@ -55,7 +55,9 @@
 #include <dlfcn.h>
 
 #ifdef __APPLE__
+#include <sys/xattr.h>
 #define PLUGIN_SUFFIX "dylib"
+bool Files::ignoreQuarantine = false;
 #else /* ! __APPLE__ */
 #define PLUGIN_SUFFIX "so"
 #endif /* ! __APPLE__ */
@@ -176,6 +178,25 @@ Files::loadLibrary(string path)
              << path << "\": error code " << GetLastError() << endl;
     }
 #else
+
+#ifdef __APPLE__
+    if(ignoreQuarantine)
+    {
+        auto valLength = getxattr(path.c_str(), "com.apple.quarantine", nullptr, 0, 0, 0);
+        if(valLength > 0)
+        {
+            char attrValue[2048];
+            valLength = getxattr(path.c_str(), "com.apple.quarantine", attrValue, static_cast<size_t>(valLength), 0, 0);
+            if(valLength > 0 && std::string(attrValue).substr(0, 4) != "00c1")
+            {
+                cerr << "Vamp::HostExt: Unable to load library \"" << path << "\": " << "Plugin in quarantine!" << endl;
+                return NULL;
+            }
+        }
+    }
+
+#endif
+
     handle = dlopen(path.c_str(), RTLD_LAZY | RTLD_LOCAL);
     if (!handle) {
         cerr << "Vamp::HostExt: Unable to load library \""
diff --git forkSrcPrefix/vamp-hostsdk/PluginLoader.h forkDstPrefix/vamp-hostsdk/PluginLoader.h
index 0735e0cc18be9328c47dad65ef6dafe0d6fc5a1a..4ffee1eb34efe0197db8d2b6f16a2eb37db45c28 100644
--- forkSrcPrefix/vamp-hostsdk/PluginLoader.h
+++ forkDstPrefix/vamp-hostsdk/PluginLoader.h
@@ -260,6 +260,10 @@ public:
      */
     std::string getLibraryPathForPlugin(PluginKey plugin);
 
+#ifdef __APPLE__
+    static void setIgnoreQuanrantineLibs(bool state);
+#endif
+
 protected:
     PluginLoader();
     virtual ~PluginLoader();
diff --git forkSrcPrefix/src/vamp-hostsdk/Files.h forkDstPrefix/src/vamp-hostsdk/Files.h
index 65992e3072fc9e021dcedf050b1e94416f8f4874..55f0d82293208098ac332e99f5ad8e08f1fbc9a5 100644
--- forkSrcPrefix/src/vamp-hostsdk/Files.h
+++ forkDstPrefix/src/vamp-hostsdk/Files.h
@@ -55,6 +55,9 @@ public:
     };
     static std::vector<std::string> listLibraryFilesMatching(Filter);
 
+#ifdef __APPLE__
+    static bool ignoreQuarantine;
+#endif
     static void *loadLibrary(std::string filename);
     static void unloadLibrary(void *);
     static void *lookupInLibrary(void *, const char *symbol);
diff --git forkSrcPrefix/vamp-hostsdk/PluginWrapper.h forkDstPrefix/vamp-hostsdk/PluginWrapper.h
index 45e68803f30c3d8b2d845812a7023daa3c08a6b4..70b90ed28e049b1630263e94ae741f3224cfcaf5 100644
--- forkSrcPrefix/vamp-hostsdk/PluginWrapper.h
+++ forkDstPrefix/vamp-hostsdk/PluginWrapper.h
@@ -124,6 +124,10 @@ public:
         return nullptr;
     }
 
+    Plugin *getPlugin() {
+        return m_plugin;
+    }
+
     /**
      * Disown the wrapped plugin, so that we no longer delete it on
      * our own destruction. The identity of the wrapped plugin is
